{"version":3,"sources":["index.less","view/CreateProject/index.js","view/Test/test.js","view/Header/Header.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CreateProject","useState","name","email","project","info","setInfo","handleChange","event","target","value","Form","onSubmit","console","log","axios","url","method","data","then","catch","error","Group","widths","Input","label","placeholder","onChange","Field","control","Button","React","Component","Header","props","button","useReactRouter","history","location","match","user","authenticated","userInfo","setUserInfo","useEffect","get","withCredentials","res","e","onClick","window","open","as","inverted","Menu","fixed","Container","Item","header","push","position","Routers","exact","path","component","App","Fragment","text","style","marginTop","Router","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8966213a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/index.ef99f934.less\";","import React, {useState} from \"react\";\nimport {useForm} from \"react-hook-form\";\nimport axios from \"axios\";\nimport {Button, Form, Input, TextArea} from \"semantic-ui-react\";\n\nconst CreateProject = () => {\n  const [info, setInfo] = useState({\n    name: \"\",\n    email: \"\",\n    project: \"\",\n  });\n\n  const handleChange = (event) => {\n    setInfo({\n      ...info,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const handleSubmit = (event) => {\n    console.log(info);\n\n    axios({\n      url: \"http://localhost:8080/api/save\",\n      method: \"POST\",\n      data: info,\n    })\n      .then(() => {\n        console.log(\"data has  been send to the server\");\n      })\n      .catch((error) => {\n        console.log(error);\n        console.log(\"data has been not sent the server\");\n      });\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Form.Group widths=\"equal\">\n        <Form.Input\n          label=\"Name\"\n          placeholder=\"Name\"\n          name=\"name\"\n          value={info.name}\n          onChange={handleChange}\n        />\n        <Form.Input\n          label=\"Email\"\n          placeholder=\"Email\"\n          value={info.email}\n          name=\"email\"\n          onChange={handleChange}\n        />\n      </Form.Group>\n      <Form.Input\n        label=\"Project\"\n        placeholder=\"Project Information\"\n        value={info.project}\n        name=\"project\"\n        onChange={handleChange}\n      />\n      <Form.Field control={Button}>Submit</Form.Field>\n    </Form>\n  );\n};\nexport default CreateProject;\n","import React from 'react';\nimport axios from 'axios';\nimport Router from \"../../Router\";\n\nclass Test extends React.Component {\n    state = {\n        title: '',\n        body: '',\n        posts: ''\n    }\n\n    componentDidMount = () => {\n        this.getBlogPost();\n    }\n\n    getBlogPost = () => {\n        axios.get('http://localhost:8080/api')\n            .then((response) => {\n                const data = response.data;\n                this.setState({posts: data});\n                console.log(\"Data has been received\");\n            })\n            .catch(() => {\n                alert('Error retrieving data!!!');\n            })\n    }\n\n    handleChange = ({target}) => {\n        const {name, value} = target;\n        this.setState({\n            [name]: value\n        })\n    }\n\n    submit = (event) => {\n        event.preventDefault();\n        const payload = {\n            title: this.state.title,\n            body: this.state.body\n        }\n        console.log(\"submit\")\n\n        axios({\n            url: 'http://localhost:8080/api/save',\n            method: 'POST',\n            data: payload\n        })\n            .then(() => {\n                console.log('data has  been send to the server');\n            })\n            .catch(() => {\n                console.log('data has been not sent the server')\n            })\n\n        this.resetUserInput();\n        this.getBlogPost();\n    }\n\n    resetUserInput = () => {\n        this.setState({\n            title: '',\n            body: ''\n        })\n    }\n\n    displayBlogPost = (posts) => {\n        if (!posts.length) return null;\n\n        return posts.map((post, index) => (\n            <div key={index} className=\"blog-post_display\">\n                <h3>{post.title}</h3>\n                <p>{post.body}</p>\n            </div>\n        ));\n    }\n\n    render() {\n        console.log(\"state:\", this.state);\n        return (\n            <div className=\"App\">\n                <h2>Welcome to the best app ever</h2>\n                <form className=\"form-input\">\n                    <div>\n                        <input type=\"text\" name=\"title\" value={this.state.title} placeholder=\"Title\"\n                               onChange={this.handleChange}/>\n                    </div>\n                    <div>\n                        <textarea name=\"body\" cols=\"30\" rows=\"10\" value={this.state.body} placeholder=\"body\"\n                                  onChange={this.handleChange}></textarea>\n                    </div>\n                    <button onClick={this.submit}>Submit</button>\n                </form>\n                <div>\n                    {this.displayBlogPost(this.state.posts)}\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Test;\n","import {Button, Container, Menu} from \"semantic-ui-react\";\nimport Router from \"../../Router\";\nimport React, {useEffect, useState} from \"react\";\nimport useReactRouter from \"use-react-router\";\nimport axios from 'axios';\nimport {Link, NavLink, withRouter} from 'react-router-dom'\n\nconst Header = (props) => {\n  const {history, location, match} = useReactRouter();\n\n  const [userInfo, setUserInfo] = useState({\n    user: {},\n    error: null,\n    authenticated: false\n  });\n\n  const handleLogin = () => {\n    window.open(\"http://localhost:8080/auth/login\", \"_self\");\n\n  };\n\n  const handleLogout = () => {\n    window.open(\"http://localhost:8080/auth/logout\", \"_self\")\n\n  };\n\n  const handleHome = () => {\n    history.push('/');\n  };\n\n  const handleProjectList = () => {\n    if (userInfo.authenticated) {\n      history.push('/create-project');\n    } else {\n      console.log(\"you haven't logged in\");\n    }\n  };\n\n\n  useEffect(() => {\n    // res.json()?\n    axios.get('http://localhost:8080/auth/login/success', {\n      withCredentials: true\n    })\n      .then(res => {\n        console.log(res);\n        return res.data;\n      })\n      .then(data => {\n        setUserInfo({\n          ...userInfo,\n          user: data.user,\n          authenticated: data.authenticated,\n        })\n      })\n      .catch(e => {\n        console.log(e);\n      })\n  }, []);\n\n  let button;\n  if(userInfo.authenticated) {\n    button = <Button onClick={handleLogout} as=\"a\" inverted>Log out</Button>;\n  } else {\n    button = <Button onClick={handleLogin} as=\"a\" inverted>Log in</Button>;\n  }\n\n\n  return (\n    <div>\n      <Menu fixed=\"top\" inverted>\n        <Container>\n          <Menu.Item as=\"a\" header>\n            Professional Development Club\n          </Menu.Item>\n          <Menu.Item as=\"a\" onClick={handleHome}>Home</Menu.Item>\n          <Menu.Item as=\"a\" onClick={handleProjectList}>Project</Menu.Item>\n          <Menu.Item position=\"right\">\n            {/*<Button onClick={handleLogin} as=\"a\" inverted>*/}\n            {/*  Log in*/}\n            {/*</Button>*/}\n            {/*<Button onClick={handleLogout} as=\"a\" inverted>*/}\n            {/*  Log out*/}\n            {/*</Button>*/}\n            {button}\n          </Menu.Item>\n        </Container>\n      </Menu>\n      <h1> {userInfo.authenticated ? \"Welcome \" + userInfo.user.name : \"Please log in\"}</h1>\n    </div>\n  );\n};\n\nexport default Header;","import React from \"react\";\nimport {Switch, BrowserRouter as Router, Route} from \"react-router-dom\";\nimport CreateProject from \"./view/CreateProject\";\nimport Test from \"./view/Test/test\";\nimport Home from \"./view/Home/Home\";\nimport Header from \"./view/Header/Header\";\n\n// export const history = createBrowserHistory();\n\nconst Routers = () => {\n  return (\n    <Router>\n      <Header/>\n      <Switch>\n        {/*<Route exact path='/' component={Home}/>*/}\n        <Route exact path='/create-project' component={CreateProject}/>\n      </Switch>\n    </Router>\n  )\n};\n\nexport default Routers;","import React, {useEffect, useState} from \"react\";\nimport Routers from \"./Router\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport {Menu, Container, Button} from \"semantic-ui-react\";\nimport CreateProject from \"./view/CreateProject\";\nimport Header from \"./view/Header/Header\";\n\nconst App = () => {\n\n  return (\n    <React.Fragment>\n      <Container text style={{marginTop: \"7em\"}}>\n        <Routers/>\n      </Container>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}